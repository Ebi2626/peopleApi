<header class="header">

    <h1 class="header__title">Proste treningowe API w Node.js!</h1>
    <div class="header__description">
        <p>To api ma za zadanie wykonać wszystkie podstawowe operacje restowego API</p>
        <p>Implementuje wszystkie elementy akronimu CRUD. Wykorzystuje nazwnictwo BEM, preprocessor SASS(SCSS) oraz
            node.js i silnik widoków handlebars.</p>
        <p>Dzięki swej prostocie może służyć jako szablon do budowy bardziej złożonych API bez konieczności
            martwienia się o podstawową konfigurację i style.</p>
        <p>Przejrzysta struktura stylów i szablonów pozwala na łatwą edycję oraz wygodne dostoswanie do własnych
            potrzeb.</p>
        <button class="header__button">Czytaj więcej</button>
    </div>
</header>
<main class="main">
    <h2 class="main__title">Lista osób zwracanych przez API</h2>
    <div class="main__wrapper">
        <!-- Below we can see magic of handlebars -->
        {{#if users}}
        <ul class="main__list">
            {{#each users}}
            <li class="main__items" data-id="{{ id }}">{{ name }} {{ lastName }}</li>
            {{/each}}
        </ul>
        {{else}}
        <div class="main__error">
            Wygląda na to, że nie ma żadnych rekordów do wyświetlenia.
        </div>
        {{/if}}
    </div>
    <div class="commands">
        <h3 class="commands__title">
            Do wydobywania informacji z API możesz użyć następujących metod:
        </h3>
        <ul class="commands__list">
            <li class="commands__item">
                <h4 class="commands__method">GET</h4>
                <p class="commands__descrpition">
                    By uzyskać dostęp do pełnej listy metodą get należy wykonać zapytanie:
                </p>
                <pre class="commands__code">localhost:8080/api/users/</pre>
            </li>
            <li class="commands__item">
                <h4 class="commands__method">GET</h4>
                <p class="commands__descrpition">
                    By uzyskać dostęp do jednej osoby (5 to przykładowe id rekordu):
                </p>
                <pre class="commands__code">localhost:8080/api/user/5</pre>
            </li>
            <li class="commands__item">
                <h4 class="commands__method">POST</h4>
                <p class="commands__descrpition">
                    Metoda działa podobnie jak metoda GET:
                </p>
                <pre class="commands__code">localhost:8080/api/users</pre>
            </li>
            <li class="commands__item">
                <h4 class="commands__method">PUT</h4>
                <p class="commands__descrpition">
                    Metoda pozwala na edycję osób o istniejących ID przez użycie składni przedstawionej poniżej.
                    By zadziałała poprawnie, należy w ciele zapytania przekazać obiekt w notacji JSON zawierający takie
                    klucze jak: "name" i "lastName".
                    Właściwie przygotowany obiekt przyjmuje następującą postać:
                    <pre class="commands__code--left">
                    // Poprawnie zbudowany obiekt metody put

                        {
                            "name": "Jan", 
                            "lastName": "Kowalski"
                        }
    </pre>
                </p>
                <pre class="commands__code">localhost:8080/api/user/5</pre>
            </li>
            <li class="commands__item">
                <h4 class="commands__method">DELETE</h4>
                <p class="commands__descrpition">
                    Metoda pozwala usunąć użytkownika o wskazanym ID:
                </p>
                <pre class="commands__code">localhost:8080/api/user/5</pre>
            </li>
        </ul>
    </div>
</main>